{"ast":null,"code":"var _jsxFileName = \"/Users/ProtosunProductions/Desktop/Assignments/assignment13/clicky-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/Birds\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport birds from \"./birds.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      birds,\n      score: 0,\n      topScore: 0,\n      message: \"Click on a bird to earn points, but don't click a bird more than once!\"\n    };\n\n    this.handleClick = (id, clicked) => {\n      const imageOrder = this.state.birds;\n\n      if (clicked) {\n        imageOrder.forEach((image, index) => {\n          imageOrder[index].clicked = false;\n        });\n        return this.setState({\n          image: imageOrder.sort(() => Math.random() - 0.5),\n          message: \"Wrong! You clicked the same bird twice. Start over.\",\n          score: 0\n        });\n      } else {\n        imageOrder.forEach((image, index) => {\n          if (id === image.id) {\n            imageOrder[index].clicked = true;\n          }\n        });\n        const _this$state = this.state,\n              topScore = _this$state.topScore,\n              score = _this$state.score;\n        const newScore = score + 1;\n        const newTopScore = newScore > topScore ? newScore : topScore;\n        return this.setState({\n          image: imageOrder.sort(() => Math.random() - 0.5),\n          message: \"Correct!\",\n          score: newScore,\n          topScore: newTopScore\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"message-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.state.message)), React.createElement(\"div\", {\n      class: \"gameScores text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Score:\"), \" \", this.state.score, \" \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Top Score:\"), \" \", this.state.topScore))), this.state.birds.map(birds => React.createElement(FriendCard, {\n      id: birds.id,\n      key: birds.id,\n      name: birds.name,\n      image: birds.image,\n      clicked: birds.clicked,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ProtosunProductions/Desktop/Assignments/assignment13/clicky-game/src/App.js"],"names":["React","Component","FriendCard","Nav","Wrapper","Title","birds","App","state","score","topScore","message","handleClick","id","clicked","imageOrder","forEach","image","index","setState","sort","Math","random","newScore","newTopScore","render","map","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/Birds\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport birds from \"./birds.json\";\n\nclass App extends Component {\n\tstate = {\n    birds,\n    score: 0,\n    topScore: 0,\n    message: \"Click on a bird to earn points, but don't click a bird more than once!\",\n  };\n\n\n  handleClick = (id, clicked) => {\n\n\t\tconst imageOrder = this.state.birds;\n\n\t\tif (clicked) {\n\t\t\timageOrder.forEach((image, index) => {\n\t\t\t\timageOrder[index].clicked = false;\n\t\t\t});\n\t\t\treturn this.setState({\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\n\t\t\t\tmessage: \"Wrong! You clicked the same bird twice. Start over.\",\n\t\t\t\tscore: 0\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\timageOrder.forEach((image, index) => {\n\t\t\t\tif (id === image.id) {\n\t\t\t\t\timageOrder[index].clicked = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst { topScore, score } = this.state;\n\t\t\tconst newScore = score + 1;\n\t\t\tconst newTopScore = newScore > topScore ? newScore : topScore;\n\n\t\t\treturn this.setState({\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\n\t\t\t\tmessage: \"Correct!\",\n\t\t\t\tscore: newScore,\n\t\t\t\ttopScore: newTopScore,\n\t\t\t})\n\t\t}\n\t};\n\n  render() {\n    return (\n\t\t\t<div>\n\t\t\t<Nav></Nav>\n      <Wrapper>\n\t\t\t\t\n          \n        <Title>\n\t\t\t\t\t<div class=\"text-center\">\n \t\t\t\t\t\t<h1 id=\"message-title\">{this.state.message}</h1>\n \t\t\t\t\t</div>\n \t\t\t\t\t<div class=\"gameScores text-center\">\n \t\t\t\t\t\t<p><strong>Score:</strong> {this.state.score} <strong>Top Score:</strong> {this.state.topScore}</p>\n \t\t\t\t\t</div> \n\t\t\t\t\t</Title>\n\t\t\t\t\n        {this.state.birds.map(birds => (\n          <FriendCard\n            id={birds.id}\n            key={birds.id}\n            name={birds.name}\n\t\t\t\t\t\timage={birds.image}\n\t\t\t\t\t\tclicked={birds.clicked}\n\t\t\t\t\t\thandleClick={this.handleClick}\n            />\n        ))}\n      </Wrapper>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}